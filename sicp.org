* Chapter 1.1
** 1.1
#+BEGIN_SRC scheme
10
12
8
3
6
a = 3
b = 4
19
false
4
16
6
16
#+END_SRC

#+RESULTS:
   correct

** 1.2
#+BEGIN_SRC scheme
( / ( + 5 
        4 
        (- 2 (- 3 (+ 6 (/ 4 5)))))
    (* 3
       (- 6 2)
       (- 2 7)))

#+END_SRC

#+RESULTS:
: -37/150
- Pretty printing is hard

** 1.3
#+BEGIN_SRC scheme -t
(define (square a ) (* a a ))
(define (sumSquare a b) (+ (square a) (square b)))

(define (sumSquareLargest a b c)
  ( cond 
    ((and (>= a c) (>= b c)) (sumSquare a b))
    ((and (>= b a) (>= c a)) (sumSquare b c))
    ((and (>= a b) (>= c b)) (sumSquare c a))
  )
)

(sumSquareLargest 1 2 3)
#+END_SRC**

#+RESULTS:
: 13
- you had to look at the answers to figure out the criteria for finding the biggest two
- need to figure out how to get multiple results

** 1.4
- A compound procedure is a procudure defined in terms of primitive procedures
- Expression are expanded when needed and then reduced
- if b > 0 return + else -
- use return value on paremeters

** 1.5



*** The test
#+BEGIN_SRC scheme
(define (p) (p))
(define (test x y)
  (if (= x 0)
      0
      y))

(test 0 (p))
#+END_SRC
*** If applicative order
#+BEGIN_SRC scheme 
(if (= 0 0) 0 (p))
(if (#t) 0 (p))
0
#+END_SRC
*** If normal order
#+BEGIN_SRC scheme 
(if (= 0 0)
    0
    (p))) ;What is p? Error??
#+END_SRC
When the interpreter using applicative order the evaluation will never finish since (p) is a function that calls itself so there is never a primtive to apply to.
In normal order 0 will be returned since at no point is (p) needed

** 1.6
- Evaluation will again never finish. In the else branch of sqrt-itr is recursive.
if is provided as a special form where the two branches use normal order evaluttion.
new-if uses applicative order, so both branches are evaluated, so sqrtiter is evulatedin a looop
** 1.7
#+BEGIN_SRC scheme
(define (good-enough? guess x)
      (< (abs (- (square guess) x)) 0.001))

(define (average x y)
	(/ (+ x y) 2))


(define (improve guess x)
	(average guess (/ x guess)))


(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x)
                 x)))
(sqrt-iter 1 100000000000.0)
#+END_SRC

#+RESULTS:
: An error occurred.
(sqrt-iter 1 100000000000.0) never terminates because on each iteration the difference if larger than 0.001
for small numbers it will terminate too early

#+BEGIN_SRC scheme
(define (good-enough? guess x)
      (< (abs (- (square guess) x)) (* guess 0.0001)))

(define (average x y)
	(/ (+ x y) 2))


(define (improve guess x)
	(average guess (/ x guess)))


(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x)
                 x)))
(sqrt-iter 1 100000000000.0)
#+END_SRC

* Chapter 1.2
** 1.9
-The first procedure is recursive, the stack will grow before it shrinks
-The second proceducre is Iterative, all calls are evalated before recursion happens
  at each step we call + again with primitives

#+BEGIN_SRC scheme 
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))
(A 1 10) ;;1024
(A 2 4) ;;65536
#+END_SRC

#+BEGIN_SRC scheme 
#+END_SRC

#+RESULTS:
: 65536

sqrt x = the y such that y >= 0 and y^2 = x
Tells you nothing about how to find out. Just what it is. Difference between
declarative (what is is) and imperitive (how to find it)
** 1.17
   Something like u
#+BEGIN_SRC scheme 
(define (* a b)
  (if (= b 0)
      0
      (if (even b)
          (* (double a) (halve b))
          (the one in the book))
#+END_SRC


* Chapter 1.3
** 1.3.3
- x is a fixed point of a function f if x satisfies f(x) = x
- 


#+BEGIN_SRC scheme
(define principal 2806.95)
(define remainder 
  ( let ((rate 0.025)
         (n 1)
         (t 19)
         (op -))
    (* principal (expt (op 1 (/ rate n )) (* n t)))))
( - principal remainder)
#+END_SRC

#+RESULTS:
: 1071.8585292399966


